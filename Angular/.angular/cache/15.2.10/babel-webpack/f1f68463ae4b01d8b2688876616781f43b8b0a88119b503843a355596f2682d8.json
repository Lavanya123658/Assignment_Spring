{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../jwt.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction DisplayleaveComponent_tr_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function DisplayleaveComponent_tr_25_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const leave_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.delete(leave_r1));\n    });\n    i0.ɵɵtext(7, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const leave_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(leave_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(leave_r1.maxLeaves);\n  }\n}\nexport class DisplayleaveComponent {\n  constructor(service, fb) {\n    this.service = service;\n    this.fb = fb;\n    this.showModal = false;\n    // updateForm!:FormGroup;\n    this.leaves = null;\n    this.leaveToUpdate = {\n      //console.log(this.leaveToUpdate);\n      id: null,\n      name: \"\",\n      maxLeaves: null\n    };\n    this.getLeaveDetails();\n  }\n  // ngOnInit(): void {\n  //   this.registerForm=this.fb.group({\n  //     name:['',[Validators.required]],\n  //     maxLeaves:['',Validators.required]\n  //   })\n  // }\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      name: ['', [Validators.required]],\n      maxLeaves: ['', Validators.required]\n    });\n    this.service.getLeaveTypes().subscribe(response => {\n      this.leavesedit = response;\n    });\n  }\n  getLeaveDetails() {\n    this.service.getLeaves().subscribe(resp => {\n      console.log(resp);\n      this.leaves = resp;\n      console.log(\"this is\", this.leaves.id);\n    }, err => {\n      console.log(err);\n    });\n  }\n  delete(leave) {\n    this.service.deleteLeaves(leave.id).subscribe(resp => {\n      console.log(resp);\n      this.getLeaveDetails();\n    }, err => console.log(err));\n  }\n  edit(leaveIn) {\n    console.log(\"inedit\");\n    this.leaveToUpdate = leaveIn;\n    console.log(this.leaveToUpdate);\n    this.showModal = true;\n    // ($('#exampleModal') as any).modal('show');\n  }\n\n  update() {\n    this.service.updateLeave(this.leaveToUpdate).subscribe(resp => {\n      console.log(resp);\n    }, err => console.log(err));\n  }\n  submitForm() {\n    const leaveTypeData = this.registerForm.value;\n    console.log(leaveTypeData);\n    // Check if the leave type already exists\n    const leaveTypeExists = this.leavesedit.find(leave => leave.name === leaveTypeData.name);\n    console.log(leaveTypeExists);\n    if (leaveTypeExists != undefined) {\n      // Update existing leave type\n      console.log(leaveTypeExists.maxLeaves);\n      leaveTypeExists.maxLeaves = leaveTypeData.maxLeaves;\n      // Call the service method to update the leave type\n      this.service.updateLeaveType(leaveTypeExists).subscribe(response => {\n        this.getLeaveDetails();\n        console.log(\"Leave type updated:\", response);\n      }, error => {\n        console.error(\"Error updating leave type:\", error);\n      });\n    } else {\n      // Create new leave type\n      this.service.createLeaves(leaveTypeData).subscribe(response => {\n        console.log(\"New leave type created:\", response);\n        this.getLeaveDetails();\n      }, error => {\n        console.error(\"Error creating new leave type:\", error);\n      });\n    }\n  }\n  static #_ = this.ɵfac = function DisplayleaveComponent_Factory(t) {\n    return new (t || DisplayleaveComponent)(i0.ɵɵdirectiveInject(i1.JwtService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DisplayleaveComponent,\n    selectors: [[\"app-displayleave\"]],\n    decls: 26,\n    vars: 3,\n    consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", 1, \"form-control\"], [\"for\", \"maxLeaves\"], [\"type\", \"number\", \"id\", \"maxLeaves\", \"formControlName\", \"maxLeaves\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-outline-secondary\", \"mt-3\", 3, \"disabled\"], [1, \"mt-5\"], [1, \"table\", \"table-bordered\"], [1, \"thead\"], [1, \"tbody\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-dark\", 3, \"click\"]],\n    template: function DisplayleaveComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Edit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function DisplayleaveComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.submitForm();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Leave Type Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Maximum Leaves\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 7);\n        i0.ɵɵtext(13, \"Submit\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"div\", 8)(15, \"table\", 9)(16, \"thead\", 10)(17, \"tr\")(18, \"th\");\n        i0.ɵɵtext(19, \"Leave Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"th\");\n        i0.ɵɵtext(21, \"Maximum Leaves\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"th\");\n        i0.ɵɵtext(23, \"Delete\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(24, \"tbody\", 11);\n        i0.ɵɵtemplate(25, DisplayleaveComponent_tr_25_Template, 8, 2, \"tr\", 12);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngForOf\", ctx.leaves);\n      }\n    },\n    dependencies: [i3.NgForOf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAiCA,UAAU,QAAe,gBAAgB;;;;;;;;IC8BlEC,0BAAiC;IAE3BA,YAAc;IAAAA,iBAAK;IACvBA,0BAAI;IAAAA,YAAmB;IAAAA,iBAAK;IAE5BA,0BAAI;IAA2CA;MAAA;MAAA;MAAA;MAAA,OAASA,sCAAa;IAAA,EAAC;IAACA,sBAAM;IAAAA,iBAAS;;;;IAHlFA,eAAc;IAAdA,mCAAc;IACdA,eAAmB;IAAnBA,wCAAmB;;;AD1BjC,OAAM,MAAOC,qBAAqB;EAQhCC,YAAoBC,OAAkB,EAASC,EAAe;IAA1C,YAAO,GAAPD,OAAO;IAAoB,OAAE,GAAFC,EAAE;IALjD,cAAS,GAAY,KAAK;IAC3B;IAGC,WAAM,GAAO,IAAI;IAuBjB,kBAAa,GAAC;MACZ;MACAC,EAAE,EAAC,IAAI;MACPC,IAAI,EAAC,EAAE;MACPC,SAAS,EAAC;KACX;IA1BC,IAAI,CAACC,eAAe,EAAE;EACxB;EAEA;EACA;EACA;EACA;EACA;EACA;EACAC,QAAQ;IAEN,IAAI,CAACC,YAAY,GAAC,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MAC9BL,IAAI,EAAC,CAAC,EAAE,EAAC,CAACP,UAAU,CAACa,QAAQ,CAAC,CAAC;MAC/BL,SAAS,EAAC,CAAC,EAAE,EAACR,UAAU,CAACa,QAAQ;KAClC,CAAC;IACF,IAAI,CAACT,OAAO,CAACU,aAAa,EAAE,CAACC,SAAS,CACnCC,QAAe,IAAI;MAClB,IAAI,CAACC,UAAU,GAAGD,QAAQ;IAC5B,CAAC,CACF;EACH;EASAP,eAAe;IACb,IAAI,CAACL,OAAO,CAACc,SAAS,EAAE,CAACH,SAAS,CAC/BI,IAAI,IAAG;MACNC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,IAAI,CAACG,MAAM,GAACH,IAAI;MAChBC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAC,IAAI,CAACC,MAAM,CAAChB,EAAE,CAAC;IACvC,CAAC,EACAiB,GAAG,IAAG;MACLH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC;IAClB,CAAC,CACF;EACH;EAEAC,MAAM,CAACC,KAAS;IACd,IAAI,CAACrB,OAAO,CAACsB,YAAY,CAACD,KAAK,CAACnB,EAAE,CAAC,CAACS,SAAS,CAC1CI,IAAI,IAAG;MACNC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,IAAI,CAACV,eAAe,EAAE;IACxB,CAAC,EACAc,GAAG,IAAGH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC,CACxB;EACH;EAEAI,IAAI,CAACC,OAAW;IACdR,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,IAAI,CAACQ,aAAa,GAACD,OAAO;IAC1BR,OAAO,CAACC,GAAG,CAAC,IAAI,CAACQ,aAAa,CAAC;IAC/B,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB;EACF;;EAEAC,MAAM;IACJ,IAAI,CAAC3B,OAAO,CAAC4B,WAAW,CAAC,IAAI,CAACH,aAAa,CAAC,CAACd,SAAS,CACnDI,IAAI,IAAG;MACNC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACnB,CAAC,EACAI,GAAG,IAAGH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC,CACxB;EACH;EAEAU,UAAU;IACR,MAAMC,aAAa,GAAG,IAAI,CAACvB,YAAY,CAACwB,KAAK;IAC7Cf,OAAO,CAACC,GAAG,CAACa,aAAa,CAAC;IAE1B;IACA,MAAME,eAAe,GAAG,IAAI,CAACnB,UAAU,CAACoB,IAAI,CAACZ,KAAK,IAAIA,KAAK,CAAClB,IAAI,KAAK2B,aAAa,CAAC3B,IAAI,CAAC;IACxFa,OAAO,CAACC,GAAG,CAACe,eAAe,CAAC;IAC5B,IAAIA,eAAe,IAAEE,SAAS,EAAE;MAC9B;MACAlB,OAAO,CAACC,GAAG,CAACe,eAAe,CAAC5B,SAAS,CAAC;MACtC4B,eAAe,CAAC5B,SAAS,GAAG0B,aAAa,CAAC1B,SAAS;MAEnD;MACA,IAAI,CAACJ,OAAO,CAACmC,eAAe,CAACH,eAAe,CAAC,CAACrB,SAAS,CACpDC,QAAQ,IAAI;QACX,IAAI,CAACP,eAAe,EAAE;QACtBW,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEL,QAAQ,CAAC;MAE9C,CAAC,EACAwB,KAAK,IAAI;QACRpB,OAAO,CAACoB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,CACF;KACF,MAAM;MACL;MACA,IAAI,CAACpC,OAAO,CAACqC,YAAY,CAACP,aAAa,CAAC,CAACnB,SAAS,CAC/CC,QAAQ,IAAI;QAEXI,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEL,QAAQ,CAAC;QAChD,IAAI,CAACP,eAAe,EAAE;MAExB,CAAC,EACA+B,KAAK,IAAI;QACRpB,OAAO,CAACoB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD,CAAC,CACF;;EAGL;EAAC;qBApHUtC,qBAAqB;EAAA;EAAA;UAArBA,qBAAqB;IAAAwC;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCTlC7C,8BAAuB;QACjBA,oBAAI;QAAAA,iBAAK;QACbA,+BAAyD;QAAxBA;UAAA,OAAW8C,gBAAY;QAAA;QACpD9C,8BAAwB;QACFA,+BAAe;QAAAA,iBAAQ;QACzCA,2BAA2E;QAC/EA,iBAAM;QAENA,8BAAwB;QACGA,+BAAc;QAAAA,iBAAQ;QAC7CA,4BAAuF;QAC3FA,iBAAM;QAENA,kCAA+F;QAAAA,uBAAM;QAAAA,iBAAS;QAOpHA,+BAAkB;QAKNA,2BAAU;QAAAA,iBAAK;QACnBA,2BAAI;QAAAA,+BAAc;QAAAA,iBAAK;QAEvBA,2BAAI;QAAAA,uBAAM;QAAAA,iBAAK;QAGnBA,kCAAqB;QACjBA,uEAMK;QACTA,iBAAQ;;;QArCJA,eAA0B;QAA1BA,4CAA0B;QAWiCA,eAAiC;QAAjCA,mDAAiC;QAmBtEA,gBAAS;QAATA,oCAAS","names":["Validators","i0","DisplayleaveComponent","constructor","service","fb","id","name","maxLeaves","getLeaveDetails","ngOnInit","registerForm","group","required","getLeaveTypes","subscribe","response","leavesedit","getLeaves","resp","console","log","leaves","err","delete","leave","deleteLeaves","edit","leaveIn","leaveToUpdate","showModal","update","updateLeave","submitForm","leaveTypeData","value","leaveTypeExists","find","undefined","updateLeaveType","error","createLeaves","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\gurij\\OneDrive\\Desktop\\Angular\\frontEnd\\src\\app\\displayleave\\displayleave.component.ts","C:\\Users\\gurij\\OneDrive\\Desktop\\Angular\\frontEnd\\src\\app\\displayleave\\displayleave.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { JwtService } from '../jwt.service';\nimport { FormGroup, FormBuilder, Validators ,NgForm} from '@angular/forms';\n\n@Component({\n  selector: 'app-displayleave',\n  templateUrl: './displayleave.component.html',\n  styleUrls: ['./displayleave.component.scss']\n})\nexport class DisplayleaveComponent implements OnInit{\n  registerForm!: FormGroup ;\n  leavesedit!:any[];\n  showModal: boolean = false;\n // updateForm!:FormGroup;\n\n\n  leaves:any = null;\n  constructor(private service:JwtService,private fb: FormBuilder){\n    this.getLeaveDetails();\n  }\n\n  // ngOnInit(): void {\n  //   this.registerForm=this.fb.group({\n  //     name:['',[Validators.required]],\n  //     maxLeaves:['',Validators.required]\n  //   })\n  // }\n  ngOnInit(): void {\n\n    this.registerForm=this.fb.group({\n      name:['',[Validators.required]],\n      maxLeaves:['',Validators.required]\n    })\n    this.service.getLeaveTypes().subscribe(\n      (response: any[]) => {\n        this.leavesedit = response;\n      }\n    );\n  }\n  leaveToUpdate={\n    //console.log(this.leaveToUpdate);\n    id:null,\n    name:\"\",\n    maxLeaves:null\n  }\n\n\n  getLeaveDetails(){\n    this.service.getLeaves().subscribe(\n      (resp)=>{\n        console.log(resp);\n        this.leaves=resp;\n        console.log(\"this is\",this.leaves.id);\n      },\n      (err)=>{\n        console.log(err);\n      }\n    )\n  }\n\n  delete(leave:any){\n    this.service.deleteLeaves(leave.id).subscribe(\n      (resp)=>{\n        console.log(resp);\n        this.getLeaveDetails();\n      },\n      (err)=>console.log(err)\n    );\n  }\n\n  edit(leaveIn:any){\n    console.log(\"inedit\");\n    this.leaveToUpdate=leaveIn;\n    console.log(this.leaveToUpdate);\n    this.showModal = true;\n    // ($('#exampleModal') as any).modal('show');\n  }\n\n  update(){\n    this.service.updateLeave(this.leaveToUpdate).subscribe(\n      (resp)=>{\n        console.log(resp);\n      },\n      (err)=>console.log(err)\n    );\n  }\n\n  submitForm() {\n    const leaveTypeData = this.registerForm.value;\n    console.log(leaveTypeData);\n\n    // Check if the leave type already exists\n    const leaveTypeExists = this.leavesedit.find(leave => leave.name === leaveTypeData.name);\n    console.log(leaveTypeExists);\n    if (leaveTypeExists!=undefined) {\n      // Update existing leave type\n      console.log(leaveTypeExists.maxLeaves);\n      leaveTypeExists.maxLeaves = leaveTypeData.maxLeaves;\n\n      // Call the service method to update the leave type\n      this.service.updateLeaveType(leaveTypeExists).subscribe(\n        (response) => {\n          this.getLeaveDetails();\n          console.log(\"Leave type updated:\", response);\n\n        },\n        (error) => {\n          console.error(\"Error updating leave type:\", error);\n        }\n      );\n    } else {\n      // Create new leave type\n      this.service.createLeaves(leaveTypeData).subscribe(\n        (response) => {\n\n          console.log(\"New leave type created:\", response);\n          this.getLeaveDetails();\n\n        },\n        (error) => {\n          console.error(\"Error creating new leave type:\", error);\n        }\n      );\n    }\n\n  }\n}\n\n","<div class=\"container\">\n  <h2>Edit</h2>\n  <form [formGroup]=\"registerForm\" (ngSubmit)=submitForm()>\n      <div class=\"form-group\">\n          <label for=\"name\">Leave Type Name</label>\n          <input type=\"text\" class=\"form-control\" id=\"name\" formControlName=\"name\" />\n      </div>\n\n      <div class=\"form-group\">\n          <label for=\"maxLeaves\">Maximum Leaves</label>\n          <input type=\"number\" class=\"form-control\" id=\"maxLeaves\" formControlName=\"maxLeaves\" />\n      </div>\n\n      <button type=\"submit\" class=\"btn btn-outline-secondary mt-3\" [disabled]=\"registerForm.invalid\">Submit</button>\n  </form>\n</div>\n\n\n\n\n<div class=\"mt-5\">\n  <table class=\"table table-bordered\">\n    <thead class=\"thead\">\n      <tr>\n        <!-- <th>ID</th> -->\n        <th>Leave Type</th>\n        <th>Maximum Leaves</th>\n        <!-- <th>Edit</th> -->\n        <th>Delete</th>\n      </tr>\n    </thead>\n    <tbody class=\"tbody\">\n        <tr *ngFor=\"let leave of leaves\">\n          <!-- <td> {{leave.id}}</td> -->\n          <td>{{leave.name}}</td>\n          <td>{{leave.maxLeaves}}</td>\n          <!-- <td><button type=\"button\" class=\"btn btn-dark\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\" (click)=\"edit(leave)\">Edit</button></td> -->\n          <td><button type=\"button\" class=\"btn btn-dark\" (click)=\"delete(leave)\">Delete</button></td>\n        </tr>\n    </tbody>\n  </table>\n</div>\n\n<!-- <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\"\n  aria-hidden=\"true\" *ngIf=\"showModal\">{{showModal}}\n  <div class=\"modal-dialog\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\" id=\"exampleModalLabel\">Update or Edit</h5>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <form #updateForm=\"ngForm\" (ngSubmit)=update()>\n          <div class=\"form-group\">\n            <label for=\"id\">Id :</label>\n            <input type=\"number\" disabled #id [(ngModel)]=\"leaveToUpdate.id\" name=\"id\" id=\"id\"\n              class=\"form-control\" placeholder=\"Leave Type ID\">\n          </div>\n          <div class=\"form-group\">\n              <label for=\"name\">Leave Type Name</label>\n              <input type=\"text\" #name [(ngModel)]=\"leaveToUpdate.name\" name=\"name\" class=\"form-control\" id=\"name\"  />\n          </div>\n\n          <div class=\"form-group\">\n              <label for=\"maxLeaves\">Maximum Leaves</label>\n              <input type=\"number\" #maxLeaves [(ngModel)]=\"leaveToUpdate.maxLeaves\" name=\"maxLeaves\" class=\"form-control\" id=\"maxLeaves\" />\n          </div>\n\n          <button type=\"submit\" class=\"btn btn-outline-secondary mt-3\" [disabled]=\"registerForm.invalid\">Update</button>\n      </form>\n      </div>\n    </div>\n  </div>\n</div> -->\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}