{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../jwt.service\";\nimport * as i2 from \"@angular/forms\";\nexport class EditLeaveTypeComponent {\n  constructor(service, fb) {\n    this.service = service;\n    this.fb = fb;\n  }\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      name: ['', [Validators.required]],\n      maxLeaves: ['', Validators.required]\n    });\n    this.service.getLeaveTypes().subscribe(response => {\n      this.leavesedit = response;\n    });\n  }\n  // submitForm(){\n  //   console.log(this.registerForm.value);\n  //   this.service.createLeaves(this.registerForm.value).subscribe(\n  //     (response)=>{\n  //     console.log(response)\n  //     }\n  //   )\n  // }\n  // submitForm() {\n  //   const leaveTypeData = this.registerForm.value;\n  //   console.log(leaveTypeData);\n  //   const leaveTypeExists = this.leaves.find(leave => leave.name === leaveTypeData.name);\n  //  // console.log(leaveTypeExists.maxLeaves);\n  //   if (leaveTypeExists) {\n  //     // Update existing leave type\n  //     console.log(leaveTypeExists.maxLeaves);\n  //     leaveTypeExists.maxLeaves = leaveTypeData.maxLeaves;\n  //     this.service.createLeaves(leaveTypeExists).subscribe(\n  //       (response) => {\n  //         console.log(\"Leave type updated:\", response);\n  //       }\n  //     );\n  //   } else {\n  //     // Create new leave type\n  //     this.service.createLeaves(leaveTypeData).subscribe(\n  //       (response) => {\n  //         console.log(\"New leave type created:\", response);\n  //       }\n  //     );\n  //   }\n  // }\n  //   submitForm() {\n  //     const leaveTypeData = this.registerForm.value;\n  //     console.log(leaveTypeData);\n  //     const leaveTypeExists = this.leaves.find(leave => leave.name === leaveTypeData.name);\n  //     console.log(leaveTypeExists);\n  //     if (leaveTypeExists) {\n  //         // Update existing leave type\n  //         console.log(leaveTypeExists.maxLeaves);\n  //         leaveTypeExists.maxLeaves = leaveTypeData.maxLeaves;\n  //         this.service.updateLeaveType(leaveTypeExists).subscribe(\n  //             (response) => {\n  //                 console.log(\"Leave type updated:\", response);\n  //             }\n  //         );\n  //     } else {\n  //         // Create new leave type\n  //         this.service.createLeaves(leaveTypeData).subscribe(\n  //             (response) => {\n  //                 console.log(\"New leave type created:\", response);\n  //             }\n  //         );\n  //     }\n  // }\n  submitForm() {\n    const leaveTypeData = this.registerForm.value;\n    console.log(leaveTypeData);\n    // Check if the leave type already exists\n    const leaveTypeExists = this.leavesedit.find(leave => leave.name === leaveTypeData.name);\n    console.log(leaveTypeExists);\n    if (leaveTypeExists != undefined) {\n      // Update existing leave type\n      console.log(leaveTypeExists.maxLeaves);\n      leaveTypeExists.maxLeaves = leaveTypeData.maxLeaves;\n      // Call the service method to update the leave type\n      this.service.updateLeaveType(leaveTypeExists).subscribe(response => {\n        console.log(\"Leave type updated:\", response);\n      }, error => {\n        console.error(\"Error updating leave type:\", error);\n      });\n    } else {\n      // Create new leave type\n      this.service.createLeaves(leaveTypeData).subscribe(response => {\n        console.log(\"New leave type created:\", response);\n      }, error => {\n        console.error(\"Error creating new leave type:\", error);\n      });\n    }\n  }\n  static #_ = this.ɵfac = function EditLeaveTypeComponent_Factory(t) {\n    return new (t || EditLeaveTypeComponent)(i0.ɵɵdirectiveInject(i1.JwtService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditLeaveTypeComponent,\n    selectors: [[\"app-edit-leave-type\"]],\n    decls: 14,\n    vars: 2,\n    consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", 1, \"form-control\"], [\"for\", \"maxLeaves\"], [\"type\", \"number\", \"id\", \"maxLeaves\", \"formControlName\", \"maxLeaves\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-outline-secondary\", \"mt-3\", 3, \"disabled\"]],\n    template: function EditLeaveTypeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Edit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function EditLeaveTypeComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.submitForm();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Leave Type Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Maximum Leaves\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 7);\n        i0.ɵɵtext(13, \"Submit\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid);\n      }\n    },\n    dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAQnE,OAAM,MAAOC,sBAAsB;EAIjCC,YACUC,OAAkB,EAClBC,EAAe;IADf,YAAO,GAAPD,OAAO;IACP,OAAE,GAAFC,EAAE;EACV;EACFC,QAAQ;IACN,IAAI,CAACC,YAAY,GAAC,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC9BC,IAAI,EAAC,CAAC,EAAE,EAAC,CAACR,UAAU,CAACS,QAAQ,CAAC,CAAC;MAC/BC,SAAS,EAAC,CAAC,EAAE,EAACV,UAAU,CAACS,QAAQ;KAClC,CAAC;IACF,IAAI,CAACN,OAAO,CAACQ,aAAa,EAAE,CAACC,SAAS,CACnCC,QAAe,IAAI;MAClB,IAAI,CAACC,UAAU,GAAGD,QAAQ;IAC5B,CAAC,CACF;EACH;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAE,UAAU;IACR,MAAMC,aAAa,GAAG,IAAI,CAACV,YAAY,CAACW,KAAK;IAC7CC,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;IAE1B;IACA,MAAMI,eAAe,GAAG,IAAI,CAACN,UAAU,CAACO,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACd,IAAI,KAAKQ,aAAa,CAACR,IAAI,CAAC;IACxFU,OAAO,CAACC,GAAG,CAACC,eAAe,CAAC;IAC5B,IAAIA,eAAe,IAAEG,SAAS,EAAE;MAC9B;MACAL,OAAO,CAACC,GAAG,CAACC,eAAe,CAACV,SAAS,CAAC;MACtCU,eAAe,CAACV,SAAS,GAAGM,aAAa,CAACN,SAAS;MAEnD;MACA,IAAI,CAACP,OAAO,CAACqB,eAAe,CAACJ,eAAe,CAAC,CAACR,SAAS,CACpDC,QAAQ,IAAI;QACXK,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEN,QAAQ,CAAC;MAC9C,CAAC,EACAY,KAAK,IAAI;QACRP,OAAO,CAACO,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,CACF;KACF,MAAM;MACL;MACA,IAAI,CAACtB,OAAO,CAACuB,YAAY,CAACV,aAAa,CAAC,CAACJ,SAAS,CAC/CC,QAAQ,IAAI;QACXK,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEN,QAAQ,CAAC;MAClD,CAAC,EACAY,KAAK,IAAI;QACRP,OAAO,CAACO,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD,CAAC,CACF;;EAEL;EAAC;qBA5GYxB,sBAAsB;EAAA;EAAA;UAAtBA,sBAAsB;IAAA0B;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCTnCC,8BAAuB;QACjBA,oBAAI;QAAAA,iBAAK;QACbA,+BAAyD;QAAxBA;UAAA,OAAWC,gBAAY;QAAA;QACpDD,8BAAwB;QACFA,+BAAe;QAAAA,iBAAQ;QACzCA,2BAA2E;QAC/EA,iBAAM;QAENA,8BAAwB;QACGA,+BAAc;QAAAA,iBAAQ;QAC7CA,4BAAuF;QAC3FA,iBAAM;QAENA,kCAA+F;QAAAA,uBAAM;QAAAA,iBAAS;;;QAX5GA,eAA0B;QAA1BA,4CAA0B;QAWiCA,eAAiC;QAAjCA,mDAAiC","names":["Validators","EditLeaveTypeComponent","constructor","service","fb","ngOnInit","registerForm","group","name","required","maxLeaves","getLeaveTypes","subscribe","response","leavesedit","submitForm","leaveTypeData","value","console","log","leaveTypeExists","find","leave","undefined","updateLeaveType","error","createLeaves","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\gurij\\OneDrive\\Desktop\\SpringAssignment\\Angular\\src\\app\\edit-leave-type\\edit-leave-type.component.ts","C:\\Users\\gurij\\OneDrive\\Desktop\\SpringAssignment\\Angular\\src\\app\\edit-leave-type\\edit-leave-type.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { JwtService } from '../jwt.service';\n\n@Component({\n  selector: 'app-edit-leave-type',\n  templateUrl: './edit-leave-type.component.html',\n  styleUrls: ['./edit-leave-type.component.scss']\n})\nexport class EditLeaveTypeComponent implements OnInit{\n  registerForm!: FormGroup ;\n  leavesedit!:any[];\n\n  constructor(\n    private service:JwtService,\n    private fb: FormBuilder\n  ){}\n  ngOnInit(): void {\n    this.registerForm=this.fb.group({\n      name:['',[Validators.required]],\n      maxLeaves:['',Validators.required]\n    })\n    this.service.getLeaveTypes().subscribe(\n      (response: any[]) => {\n        this.leavesedit = response;\n      }\n    );\n  }\n\n  // submitForm(){\n  //   console.log(this.registerForm.value);\n  //   this.service.createLeaves(this.registerForm.value).subscribe(\n  //     (response)=>{\n  //     console.log(response)\n  //     }\n  //   )\n  // }\n  // submitForm() {\n  //   const leaveTypeData = this.registerForm.value;\n  //   console.log(leaveTypeData);\n  //   const leaveTypeExists = this.leaves.find(leave => leave.name === leaveTypeData.name);\n  //  // console.log(leaveTypeExists.maxLeaves);\n  //   if (leaveTypeExists) {\n  //     // Update existing leave type\n  //     console.log(leaveTypeExists.maxLeaves);\n  //     leaveTypeExists.maxLeaves = leaveTypeData.maxLeaves;\n  //     this.service.createLeaves(leaveTypeExists).subscribe(\n  //       (response) => {\n  //         console.log(\"Leave type updated:\", response);\n  //       }\n  //     );\n  //   } else {\n  //     // Create new leave type\n  //     this.service.createLeaves(leaveTypeData).subscribe(\n  //       (response) => {\n  //         console.log(\"New leave type created:\", response);\n  //       }\n  //     );\n  //   }\n  // }\n\n//   submitForm() {\n//     const leaveTypeData = this.registerForm.value;\n//     console.log(leaveTypeData);\n//     const leaveTypeExists = this.leaves.find(leave => leave.name === leaveTypeData.name);\n//     console.log(leaveTypeExists);\n//     if (leaveTypeExists) {\n//         // Update existing leave type\n//         console.log(leaveTypeExists.maxLeaves);\n//         leaveTypeExists.maxLeaves = leaveTypeData.maxLeaves;\n//         this.service.updateLeaveType(leaveTypeExists).subscribe(\n//             (response) => {\n//                 console.log(\"Leave type updated:\", response);\n//             }\n//         );\n//     } else {\n//         // Create new leave type\n//         this.service.createLeaves(leaveTypeData).subscribe(\n//             (response) => {\n//                 console.log(\"New leave type created:\", response);\n//             }\n//         );\n//     }\n// }\n\nsubmitForm() {\n  const leaveTypeData = this.registerForm.value;\n  console.log(leaveTypeData);\n\n  // Check if the leave type already exists\n  const leaveTypeExists = this.leavesedit.find(leave => leave.name === leaveTypeData.name);\n  console.log(leaveTypeExists);\n  if (leaveTypeExists!=undefined) {\n    // Update existing leave type\n    console.log(leaveTypeExists.maxLeaves);\n    leaveTypeExists.maxLeaves = leaveTypeData.maxLeaves;\n\n    // Call the service method to update the leave type\n    this.service.updateLeaveType(leaveTypeExists).subscribe(\n      (response) => {\n        console.log(\"Leave type updated:\", response);\n      },\n      (error) => {\n        console.error(\"Error updating leave type:\", error);\n      }\n    );\n  } else {\n    // Create new leave type\n    this.service.createLeaves(leaveTypeData).subscribe(\n      (response) => {\n        console.log(\"New leave type created:\", response);\n      },\n      (error) => {\n        console.error(\"Error creating new leave type:\", error);\n      }\n    );\n  }\n}\n\n}\n","<div class=\"container\">\n  <h2>Edit</h2>\n  <form [formGroup]=\"registerForm\" (ngSubmit)=submitForm()>\n      <div class=\"form-group\">\n          <label for=\"name\">Leave Type Name</label>\n          <input type=\"text\" class=\"form-control\" id=\"name\" formControlName=\"name\" />\n      </div>\n\n      <div class=\"form-group\">\n          <label for=\"maxLeaves\">Maximum Leaves</label>\n          <input type=\"number\" class=\"form-control\" id=\"maxLeaves\" formControlName=\"maxLeaves\" />\n      </div>\n\n      <button type=\"submit\" class=\"btn btn-outline-secondary mt-3\" [disabled]=\"registerForm.invalid\">Submit</button>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}